#
# GNU Makefile for LLVM 'tools/Clang/lib/Analysis'.
#
TOP_DIR = ../../../..
TARGETS = $(BUILD_DIR)/lib/clangAnalysis.lib

CLANG_INC = $(TOP_DIR)/tools/Clang/include/clang

#
# .inc-files needed here:
#
INC_FILES = $(CLANG_INC)/AST/Attrs.inc              \
            $(CLANG_INC)/AST/AttrVisitor.inc        \
            $(CLANG_INC)/AST/DeclNodes.inc          \
            $(CLANG_INC)/AST/StmtNodes.inc          \
            $(CLANG_INC)/AST/CommentCommandList.inc \
            $(CLANG_INC)/Basic/AttrList.inc

include $(TOP_DIR)/Common.Windows

LIB_SRC = AnalysisDeclContext.cpp     \
          BodyFarm.cpp                \
          CFG.cpp                     \
          CFGReachabilityAnalysis.cpp \
          CFGStmtMap.cpp              \
          CallGraph.cpp               \
          CloneDetection.cpp          \
          CocoaConventions.cpp        \
          ConstructionContext.cpp     \
          Consumed.cpp                \
          CodeInjector.cpp            \
          Dominators.cpp              \
          ExprMutationAnalyzer.cpp    \
          LiveVariables.cpp           \
          ObjCNoReturn.cpp            \
          PostOrderCFGView.cpp        \
          ProgramPoint.cpp            \
          ReachableCode.cpp           \
          RetainSummaryManager.cpp    \
          ThreadSafety.cpp            \
          ThreadSafetyCommon.cpp      \
          ThreadSafetyLogical.cpp     \
          ThreadSafetyTIL.cpp         \
          UninitializedValues.cpp

ALL_SOURCES = $(LIB_SRC)

LIB_OBJ = $(call cpp_to_obj, $(LIB_SRC))

all: $(GENERATED) $(INC_FILES) $(TARGETS)

ifeq ($(USE_MP_COMPILE),1)
$(LIB_OBJ): $(LIB_SRC)
	$(call MP_compile, $(LIB_SRC))
endif

$(BUILD_DIR)/lib/clangAnalysis.lib: $(LIB_OBJ)
	 $(call create_lib, $@, $^)

$(INC_FILES):
	$(call do_make, $(CLANG_INC), all)

-include .depend.Windows

